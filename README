Date data

Arithmetic with the proleptic gregorian calendar (Month, Day, Weekday).
Arithmetic on local, abstract time-of-day values (LocalTime).

The examples below assume you have exported all relevant classes and
commands from the library as global variables.

Examples
d1 = new Day(2014,5,1)    ==> 5/1/2014
d2 = d1.add(37)           ==> 6/7/2014
d1.lt(d2)                 ==> true
d2.diff(d1)               ==> 37
d1.dayOfWeek              ==> Wednesday
d1.mjd                    ==> 56778
d2.encode()               ==> "2014-06-07"
Day.decode("2014-06-07")  ==> 6/7/2014
d1.month                  ==> 5
m1 = d1.toMonth()         ==> May 2014
m2 = m1.add(3)            ==> August 2014
m2.diff(m1)               ==> 3
d3 = m2.onDay(15)         ==> 8/15/2014
d3.atMidnight()           ==> 8/15/2014 00:00:00
t1 = d3.atTime(15,0,0)    ==> 8/15/2014 15:00:00
t2 = t1.addHours(4)       ==> 8/15/2014 19:00:00
t2.diff(t1)               ==> 14400
t2.unixTime()             ==> 1398970800
t2.day                    ==> 8/15/2014
t2.mjd                    ==> 56884.791666666664
t2.encode()               ==> "2014-08-15 19:00:00"
Apocalypse38              ==> 1/19/2038 03:14:08
getCurrentLocalTime       ~~> 6/01/2014 00:27:59.329


Day
  new               : Integer, Integer 1..12, Integer 1..28|29|30|31 -> Day
  decode            : String -> Day
  fromMJD           : Integer -> Day
properties
  year              : Integer
  month             : Integer 1..12
  day               : Integer 1..28|29|30|31
  dayOfWeek         : Weekday
  mjd               : Integer
operations
  diff              : Day, Day -> Integer
  add               : Day, Integer -> Day
  addMonthsClamp    : Day, Integer -> Day
  addMonthsRollover : Day, Integer -> Day
  addYearsClamp     : Day, Integer -> Day
  addYearsRollover  : Day, Integer -> Day
  compare           : Day, Day -> -1|0|1
  lt,gt,lte,gte     : Day, Day -> Bool
  eq, neq           : Day, Day -> Bool
  atMidnight        : Day -> LocalTime
  atTime            : Day, Integer 0..23, Integer 0..59, Number [0,61)
                        -> LocalTime
  toMonth           : Day -> Month
  encode            : Day -> String
  next              : Day -> Day
  prev              : Day -> Day

LocalTime
  new               : Day, Integer 0..23, Integer 0..59, Number [0,61)
                        -> LocalTime
  decode            : String -> LocalTime
properties
  day               : Day
  hour              : Integer 0..23
  minute            : Integer 0..59
  second            : Number [0,61)
operations
  onDay             : LocalTime, Day -> LocalTime
  diff              : LocalTime, LocalTime -> Number
  addSeconds        : LocalTime, Number -> LocalTime
  addMinutes        : LocalTime, Integer -> LocalTime
  addHours          : LocalTime, Integer -> LocalTime
  addDays           : LocalTime, Integer -> LocalTime
  addMonthsClamp    : LocalTime, Integer -> LocalTime
  addMonthsRollover : LocalTime, Integer -> LocalTime
  addYearsClamp     : LocalTime, Integer -> LocalTime
  addYearsRollover  : LocalTime, Integer -> LocalTime
  compare           : LocalTime, LocalTime -> -1|0|1
  lt,gt,lte,gte     : LocalTime, LocalTime -> Bool
  eq, neq           : LocalTime, LocalTime -> Bool
  encode            : LocalTime -> String
  asUTC             : LocalTime -> UTCTime
  asZone            : LocalTime -> (z:TimeZone) -> ZonedTime z

Month
  new             : Integer, Integer 1..12 -> Month
  fromDay         : Day -> Month
  decode          : String -> Month
properties
  month           : Integer 1..12
  year            : Integer
  dayCount        : Integer
operations
  diff            : Month, Month -> Integer
  add             : Month, Integer -> Month
  compare         : Month, Month -> -1|0|1
  lt,gt,lte,gte   : Month, Month -> Bool
  eq, neq         : Month, Month -> Bool
  firstDay        : Month -> Day
  lastDay         : Month -> Day
  onDay           : Month, Integer 1..28 -> Day
  onDayClamp      : Month, Integer 1..31 -> Day
  onDayRollover   : Month, Integer 1..31 -> Day
  encode          : Month -> String
  next            : Month -> Month
  prev            : Month -> Month

Weekday
  decode : Integer 0..6 -> Weekday
properties
  name   : Weekday -> String
operations
  encode : Weekday -> Integer 0..6
  next : Weekday -> Weekday
  prev : Weekday -> Weekday

Year
  isLeap : Integer -> Bool
  easter : Integer -> Day

ZonedTime
properties
  timeZone      : TimeZone
  localTime     : LocalTime
  offset        : Number
  mjd           : Number
operations
  unixTime      : ZonedTime z -> Number
  inZone        : ZonedTime z -> (y:TimeZone) -> ZonedTime y
  toUTC         : ZonedTime z -> UTCTime
  diff          : ZonedTime z -> ZonedTime y -> Number
  lt,lte,gt,gte : ZonedTime z -> ZonedTime y -> Bool
  eq,neq        : ZonedTime z -> ZonedTime y -> Bool
  encode        : ZonedTime z -> String

TimeZone
  byName         : String -> TimeZone | Null
  byRegion       : String -> [TimeZone]
  all            : [TimeZone]
properties
  name           : String
  region         : String
  tzInfoName     : String
  nominalOffset  : [Integer -12..12, Integer 0..59]
operations
  decode         : Timezone -> String -> ZonedTime
  decodeUnixTime : Timezone -> Number -> ZonedTime

UTCTime = ZonedTime UTC



Constants
  UnixEpoch           : UTCTime
  JulianEpoch         : UTCTime
  Apocalypse38        : UTCTime
  Sunday, Monday, ... : Weekday

Commands
  getCurrentUTCTime   :: UTCTime
  getCurrentLocalTime :: LocalTime
  getCurrentZonedTime :: ZonedTime
  getCurrentLocalDate :: Day

Exceptions
  * when decoding fails
  * when js arithmetic on very large years would give the wrong result
  * not every product of valid LocalTime and valid TimeZone is valid

Notes

The LocalTime data type is an abstract notion of time independent from any
standard of timekeeping. Imagine this as simply representing configurations
of a calendar and a clock on the wall. Use UTCTime or ZonedTime to work
with standard historical moments in time, though you might not need to.

The seconds field of a LocalTime is not only fractional, but can be greater
than 60 to represent time during a leap second. LocalTimes with seconds value
60 or more are considered to be the same as midnight of the next day for the
purposes of difference and translations (addSeconds, addDays, etc). Note also
that differences and translations never take into account leap seconds.
LocalTime and UTCTime are intended to be only an approximation of some linear
physical timescale.

I am currently missing, like the js library itself, something like strftime
and strptime for more flexible interaction with string representations. 

There are two kinds of MJD in use here. The mjd property of Day should be
considered the modified julian day number, which is simply the count of days
since 1858-11-17 (gregorian) which is day 0. The mjd property of ZonedTime is
the more familiar modified julian date. This is the nominal time, measured in
days, since midnight of 1858-11-17 UTC.

Future
  * add formatting
  * add parsing
  * add the easter algorithm
